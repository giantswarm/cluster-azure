---
# Source: cluster-azure/templates/list.yaml
apiVersion: v1
kind: Secret
metadata:
  name: test-wc-containerd-configuration
data:
  registry-config.toml: "dmVyc2lvbiA9IDIKCiMgcmVjb21tZW5kZWQgZGVmYXVsdHMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY29udGFpbmVyZC9jb250YWluZXJkL2Jsb2IvbWFpbi9kb2NzL29wcy5tZCNiYXNlLWNvbmZpZ3VyYXRpb24KIyBzZXQgY29udGFpbmVyZCBhcyBhIHN1YnJlYXBlciBvbiBsaW51eCB3aGVuIGl0IGlzIG5vdCBydW5uaW5nIGFzIFBJRCAxCnN1YnJlYXBlciA9IHRydWUKIyBzZXQgY29udGFpbmVyZCdzIE9PTSBzY29yZQpvb21fc2NvcmUgPSAtOTk5CmRpc2FibGVkX3BsdWdpbnMgPSBbXQpbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ydW50aW1lLnYxLmxpbnV4Il0KIyBzaGltIGJpbmFyeSBuYW1lL3BhdGgKc2hpbSA9ICJjb250YWluZXJkLXNoaW0iCiMgcnVudGltZSBiaW5hcnkgbmFtZS9wYXRoCnJ1bnRpbWUgPSAicnVuYyIKIyBkbyBub3QgdXNlIGEgc2hpbSB3aGVuIHN0YXJ0aW5nIGNvbnRhaW5lcnMsIHNhdmVzIG9uIG1lbW9yeSBidXQKIyBsaXZlIHJlc3RvcmUgaXMgbm90IHN1cHBvcnRlZApub19zaGltID0gZmFsc2UKCltwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkLnJ1bnRpbWVzLnJ1bmNdCiMgc2V0dGluZyBydW5jLm9wdGlvbnMgdW5zZXRzIHBhcmVudCBzZXR0aW5ncwpydW50aW1lX3R5cGUgPSAiaW8uY29udGFpbmVyZC5ydW5jLnYyIgpbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIuY29udGFpbmVyZC5ydW50aW1lcy5ydW5jLm9wdGlvbnNdClN5c3RlbWRDZ3JvdXAgPSB0cnVlCltwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIl0Kc2FuZGJveF9pbWFnZSA9ICJnc29jaS5henVyZWNyLmlvL2dpYW50c3dhcm0vcGF1c2U6My45IgoKW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLnJlZ2lzdHJ5XQogIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5yZWdpc3RyeS5taXJyb3JzXQogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLnJlZ2lzdHJ5Lm1pcnJvcnMuImRvY2tlci5pbyJdCiAgICAgIGVuZHBvaW50ID0gWyJodHRwczovL3JlZ2lzdHJ5LTEuZG9ja2VyLmlvIiwiaHR0cHM6Ly9naWFudHN3YXJtLmF6dXJlY3IuaW8iLF0KW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLnJlZ2lzdHJ5LmNvbmZpZ3NdCiAgCg=="
---
# Source: cluster-azure/templates/list.yaml
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  labels:
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
  name: test-wc
  namespace: org-giantswarm
spec:  
  additionalTags:
    giantswarm-cluster: test-wc
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: cluster-identity
    namespace: org-giantswarm
  location: westeurope
  networkSpec:
    subnets:
      - name: control-plane-subnet
        role: control-plane
        cidrBlocks:
        - 10.0.16.128/26
        securityGroup:
          name: test-wc-controlplane-nsg
          securityRules:
           - name: "allow_ssh_from_all"
             description: "allow SSH"
             direction: "Inbound"
             priority: 148
             protocol: "*"
             destination: "*"
             destinationPorts: "22"
             source: "*"
             sourcePorts: "*"
           - name: "allow_apiserver_from_all"
             description: "Allow K8s API Server"
             direction: "Inbound"
             priority: 149
             protocol: "*"
             destination: "*"
             destinationPorts: "6443"
             source: "*"
             sourcePorts: "*"
      - name: node-subnet
        natGateway:
          name: node-natgateway
        role: node
        cidrBlocks:
        - 10.0.16.0/25
        
    vnet:
      name: test-wc-vnet
      cidrBlocks:
      - 10.0.16.0/24
  resourceGroup: test-wc
  subscriptionID: 12345678-abcd-1234-abcd-1234567abcde
---
# Source: cluster-azure/templates/list.yaml
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  labels:
    cluster.x-k8s.io/role: control-plane
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
  name: test-wc-control-plane-41ff2439
  namespace: org-giantswarm
spec:
  template:
    metadata:
      labels:
        app: "cluster-azure"
        app.kubernetes.io/managed-by: "Helm"
        cluster.x-k8s.io/cluster-name: "test-wc"
        giantswarm.io/cluster: "test-wc"
        giantswarm.io/organization: "test"
        app.kubernetes.io/version: ""
        helm.sh/chart: "cluster-azure-0.0.0-dev"
        application.giantswarm.io/team: "phoenix"
    spec: 
      identity: SystemAssigned
      systemAssignedIdentityRole:
        scope: /subscriptions/12345678-abcd-1234-abcd-1234567abcde/resourceGroups/test-wc
        definitionID: /subscriptions/12345678-abcd-1234-abcd-1234567abcde/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c
      image:
        computeGallery:
          gallery: gsCapzFlatcar-41c2d140-ac44-4d8b-b7e1-7b2f1ddbe4d0
          name: capi-flatcar-stable-1.25.10-gen2-gs
          version: 3510.2.5
      dataDisks:
        - diskSizeGB: 100
          lun: 0
          nameSuffix: etcddisk
        - diskSizeGB: 100
          lun: 1
          nameSuffix: containerddisk
        - diskSizeGB: 100
          lun: 2
          nameSuffix: kubeletdisk
      osDisk:
        diskSizeGB: 50
        osType: Linux
      securityProfile:
        encryptionAtHost: false
      sshPublicKey: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDbDlkVEhZbmZhUmY3NUZUd3YybGo1UkF2QmY0UjlvMzlKNXorUHlmMTAxY05EUlNEbWJKTTF0c2Fkb3dydlBnOElNcVBOMldPNzdMYmlhbTNMK1dRRHhoQ0NSODdtVzlxREphNGFWSEpadWw0R0xBK0lqODVyT3ExVXkyb0lBWHR1YWlwVlU1SDJJZFVpRHJQWitEeTlZeHNaZldwKzMrOFdJL09WeXhoSXdRcGI0UE4zc2J3aVNKREYyTTkxZXh3bkFpSHlzRTNCUzBEazc1T01HdXpaT21XUTBkbkRXMEthem9yMDZzdFlhSUFiZVNsZjRNUWxVRTlLY29QTWplQmw1R1dKVnk1bmJybTV5bDRQK1ZJNm5wcDhyY0ZCOVlYSDlxM25tdGt4SkYxRWRZeUhZMVZpb0ZsYmp3bnp0dklLZ3liUEMrbWxEOUxyTEZ1ZWlkUzc=
      vmSize: Standard_D4s_v5
      subnetName: control-plane-subnet
---
# Source: cluster-azure/templates/list.yaml
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  labels:
    giantswarm.io/machine-deployment: test-wc-
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
  name: test-wc--55abf9fd
  namespace: org-giantswarm
spec:
  template:
    metadata:
      labels:
        app: "cluster-azure"
        app.kubernetes.io/managed-by: "Helm"
        cluster.x-k8s.io/cluster-name: "test-wc"
        giantswarm.io/cluster: "test-wc"
        giantswarm.io/organization: "test"
        app.kubernetes.io/version: ""
        helm.sh/chart: "cluster-azure-0.0.0-dev"
        application.giantswarm.io/team: "phoenix"
    spec:
      identity: SystemAssigned
      systemAssignedIdentityRole:
        scope: /subscriptions/12345678-abcd-1234-abcd-1234567abcde/resourceGroups/test-wc
        definitionID: /subscriptions/12345678-abcd-1234-abcd-1234567abcde/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c
      image:
        computeGallery:
          gallery: gsCapzFlatcar-41c2d140-ac44-4d8b-b7e1-7b2f1ddbe4d0
          name: capi-flatcar-stable-1.25.10-gen2-gs
          version: 3510.2.5
      osDisk:
        diskSizeGB: 50
        managedDisk:
          storageAccountType: Premium_LRS
        osType: Linux
      securityProfile:
        encryptionAtHost: 
      sshPublicKey: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDbDlkVEhZbmZhUmY3NUZUd3YybGo1UkF2QmY0UjlvMzlKNXorUHlmMTAxY05EUlNEbWJKTTF0c2Fkb3dydlBnOElNcVBOMldPNzdMYmlhbTNMK1dRRHhoQ0NSODdtVzlxREphNGFWSEpadWw0R0xBK0lqODVyT3ExVXkyb0lBWHR1YWlwVlU1SDJJZFVpRHJQWitEeTlZeHNaZldwKzMrOFdJL09WeXhoSXdRcGI0UE4zc2J3aVNKREYyTTkxZXh3bkFpSHlzRTNCUzBEazc1T01HdXpaT21XUTBkbkRXMEthem9yMDZzdFlhSUFiZVNsZjRNUWxVRTlLY29QTWplQmw1R1dKVnk1bmJybTV5bDRQK1ZJNm5wcDhyY0ZCOVlYSDlxM25tdGt4SkYxRWRZeUhZMVZpb0ZsYmp3bnp0dklLZ3liUEMrbWxEOUxyTEZ1ZWlkUzc=
      vmSize: Standard_D4s_v5
      subnetName: node-subnet
---
# Source: cluster-azure/charts/cluster/templates/clusterapi/cluster.yaml
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  annotations:    
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    # deprecated: "app: cluster-azure" label is deprecated and it will be removed after upgrading
    # to Kubernetes 1.25. We still need it here because existing ClusterResourceSet selectors
    # need this label on the Cluster resource.
    app: "cluster-azure"
    app.kubernetes.io/name: "cluster"
    app.kubernetes.io/version: "0.18.0"
    app.kubernetes.io/part-of: "cluster-azure"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Helm"
    helm.sh/chart: "cluster-0.18.0"
    application.giantswarm.io/team: "turtles"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    giantswarm.io/service-priority: lowest
    cluster.x-k8s.io/cluster-name: "test-wc"
    cluster.x-k8s.io/watch-filter: capi        
    cluster.giantswarm.io/test: "value1"
    test.io/testing: "test-label"
    policy.giantswarm.io/psp-status: disabled
  name: test-wc
  namespace: org-giantswarm
spec:
  clusterNetwork:
    apiServerPort: 6443
    services:
      cidrBlocks:
        - 172.31.0.0/16
    pods:
      cidrBlocks:
        - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: test-wc
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: test-wc
---
# Source: cluster-azure/templates/helmreleases/cni.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: test-wc-cilium
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    giantswarm.io/service-priority: lowest
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  suspend: false
  releaseName: cilium
  targetNamespace: kube-system
  storageNamespace: kube-system
  chart:
    spec:
      chart: cilium
      # used by renovate
      # repo: giantswarm/cilium-app
      version: 0.21.0
      sourceRef:
        kind: HelmRepository
        name: test-wc-default
  kubeConfig:
    secretRef:
      name: test-wc-kubeconfig
  dependsOn:
    - name: test-wc-azure-cloud-controller-manager
      namespace: org-giantswarm
    - name: test-wc-azure-cloud-node-manager
      namespace: org-giantswarm
  interval: 2m
  install:
    remediation:
      retries: 30
  # Default values
  # https://github.com/giantswarm/cilium-app/blob/main/helm/cilium/values.yaml
  values:
    ipam:
      mode: kubernetes
    k8sServiceHost: apiserver.test-wc.azuretest.gigantic.io
    k8sServicePort: '6443'
    kubeProxyReplacement: strict
    hubble:
      relay:
        enabled: true
    defaultPolicies:
      enabled: true
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
    global:
      podSecurityStandards:
        enforced: true
---
# Source: cluster-azure/templates/helmreleases/coredns.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: test-wc-coredns
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    giantswarm.io/service-priority: lowest
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  suspend: false
  releaseName: coredns
  targetNamespace: kube-system
  storageNamespace: kube-system
  chart:
    spec:
      chart: coredns-app
      # used by renovate
      # repo: giantswarm/coredns-app
      version: 1.21.0
      sourceRef:
        kind: HelmRepository
        name: test-wc-default
  dependsOn:
    - name: test-wc-cilium
      namespace: org-giantswarm
  kubeConfig:
    secretRef:
      name: test-wc-kubeconfig
  interval: 2m
  install:
    remediation:
      retries: 30
  # Default values
  # https://github.com/giantswarm/coredns-app/blob/main/helm/coredns-app/values.yaml
  values:
    cluster:
      calico:
        CIDR: "192.168.0.0/16"
      kubernetes:
        API:
          # We are currently setting 10.96.0.0/12 due to a bug - https://github.com/giantswarm/giantswarm/issues/26664
          # With this change we will be using the right value 
          clusterIPRange: "172.31.0.0/16"
        DNS:
          IP: "172.31.0.10"
    global:
      podSecurityStandards:
        enforced: true
---
# Source: cluster-azure/templates/helmreleases/cpi.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: test-wc-azure-cloud-controller-manager
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    giantswarm.io/service-priority: lowest
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  suspend: false
  releaseName: azure-cloud-controller-manager
  targetNamespace: kube-system
  storageNamespace: kube-system
  chart:
    spec:
      chart: azure-cloud-controller-manager-app
      # used by renovate
      # repo: giantswarm/azure-cloud-controller-manager-app
      version: 1.24.18-gs6
      sourceRef:
        kind: HelmRepository
        name: test-wc-default
  kubeConfig:
    secretRef:
      name: test-wc-kubeconfig
  dependsOn:
    - name: test-wc-vertical-pod-autoscaler-crd
      namespace: org-giantswarm
  interval: 2m
  install:
    remediation:
      retries: 30
  # Default values
  # https://github.com/giantswarm/azure-cloud-controller-manager-app/blob/main/helm/azure-cloud-controller-manager-app/values.yaml
  values:
    verticalPodAutoscaler:
      enabled: true
    cluster:
      calico:
        CIDR: "192.168.0.0/16"
    controller:
      azureCredentialFile: "/etc/kubernetes/azure.json"
      kubeconfigFromHost: false
    global:
      podSecurityStandards:
        enforced: true
---
# Source: cluster-azure/templates/helmreleases/cpi.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: test-wc-azure-cloud-node-manager
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    giantswarm.io/service-priority: lowest
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  suspend: false
  releaseName: azure-cloud-node-manager
  targetNamespace: kube-system
  storageNamespace: kube-system
  chart:
    spec:
      chart: azure-cloud-node-manager-app
      # used by renovate
      # repo: giantswarm/azure-cloud-node-manager-app
      version: 1.24.18-gs6
      sourceRef:
        kind: HelmRepository
        name: test-wc-default
  kubeConfig:
    secretRef:
      name: test-wc-kubeconfig
  dependsOn:
    - name: test-wc-vertical-pod-autoscaler-crd
      namespace: org-giantswarm
  interval: 2m
  install:
    remediation:
      retries: 30
  values:
    verticalPodAutoscaler:
      enabled: true
    global:
      podSecurityStandards:
        enforced: true
    # kyverno installs PolicyException CRs for core components on CAPI clusters
    deployPolicyExceptions: false
---
# Source: cluster-azure/templates/helmreleases/csi.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: test-wc-azuredisk-csi-driver
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    giantswarm.io/service-priority: lowest
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  suspend: false
  releaseName: azuredisk-csi-driver
  targetNamespace: kube-system
  storageNamespace: kube-system
  chart:
    spec:
      chart: azuredisk-csi-driver-app
      # used by renovate
      # repo: giantswarm/azuredisk-csi-driver-app
      version: 1.26.2-gs6
      sourceRef:
        kind: HelmRepository
        name: test-wc-default
  kubeConfig:
    secretRef:
      name: test-wc-kubeconfig
  dependsOn:
    - name: test-wc-azure-cloud-controller-manager
      namespace: org-giantswarm
    - name: test-wc-azure-cloud-node-manager
      namespace: org-giantswarm
  interval: 2m
  install:
    remediation:
      retries: 30
  values:
    provider: capz
    controller:
      disableAvailabilitySetNodes: false
      verticalPodAutoscaler:
        enabled: true
    linux:
      azure_credential_file: /etc/kubernetes/azure.json
      verticalPodAutoscaler:
        enabled: true
    snapshot:
      verticalPodAutoscaler:
        enabled: true
    global:
      podSecurityStandards:
        enforced: true
---
# Source: cluster-azure/templates/helmreleases/csi.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: test-wc-azurefile-csi-driver
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    giantswarm.io/service-priority: lowest
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  suspend: false
  releaseName: azurefile-csi-driver
  targetNamespace: kube-system
  storageNamespace: kube-system
  chart:
    spec:
      chart: azurefile-csi-driver-app
      # used by renovate
      # repo: giantswarm/azurefile-csi-driver-app
      version: 1.26.0-gs5
      sourceRef:
        kind: HelmRepository
        name: test-wc-default
  kubeConfig:
    secretRef:
      name: test-wc-kubeconfig
  dependsOn:
    - name: test-wc-azure-cloud-controller-manager
      namespace: org-giantswarm
    - name: test-wc-azure-cloud-node-manager
      namespace: org-giantswarm
  interval: 2m
  install:
    remediation:
      retries: 30
  values:
    provider: capz
    global:
      podSecurityStandards:
        enforced: true
---
# Source: cluster-azure/templates/helmreleases/vpa-crd-helmrelease.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: test-wc-vertical-pod-autoscaler-crd
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  releaseName: vertical-pod-autoscaler-crd
  targetNamespace: kube-system
  storageNamespace: kube-system
  chart:
    spec:
      chart: vertical-pod-autoscaler-crd
      # used by renovate
      # repo: giantswarm/vertical-pod-autoscaler-crd
      version: 3.0.0
      sourceRef:
        kind: HelmRepository
        name: test-wc-default
  kubeConfig:
    secretRef:
      name: test-wc-kubeconfig
  interval: 1m
  install:
    remediation:
      retries: 30
  values:
    global:
      podSecurityStandards:
        enforced: true
---
# Source: cluster-azure/templates/helmreleases/helmrepositories.yaml
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: test-wc-default
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    giantswarm.io/service-priority: lowest
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  interval: 10m
  url: https://giantswarm.github.io/default-catalog
---
# Source: cluster-azure/templates/helmreleases/helmrepositories.yaml
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: test-wc-default-test
  namespace: org-giantswarm
  annotations:
    cluster.giantswarm.io/description: ""
  labels:
    cluster-apps-operator.giantswarm.io/watching: ""
    giantswarm.io/service-priority: lowest
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  interval: 10m
  url: https://giantswarm.github.io/default-test-catalog
---
# Source: cluster-azure/templates/list.yaml
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  labels:
    giantswarm.io/machine-deployment: test-wc-
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
  name: test-wc--0b97aa05
  namespace: org-giantswarm
spec:
  template:
    spec:
      format: ignition
      ignition:
        containerLinuxConfig:
          additionalConfig: |
            systemd:
              units:
              - name: kubeadm.service
                dropins:
                - name: 10-flatcar.conf
                  contents: |
                    [Unit]
                    After=oem-cloudinit.service
              - name: teleport.service
                enabled: true
                contents: |
                  [Unit]
                  Description=Teleport Service
                  After=network.target
              
                  [Service]
                  Type=simple
                  Restart=on-failure
                  ExecStart=/opt/bin/teleport start --roles=node --config=/etc/teleport.yaml --pid-file=/run/teleport.pid
                  ExecReload=/bin/kill -HUP $MAINPID
                  PIDFile=/run/teleport.pid
                  LimitNOFILE=524288
              
                  [Install]
                  WantedBy=multi-user.target
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            azure-container-registry-config: /etc/kubernetes/azure.json
            cloud-config: /etc/kubernetes/azure.json
            cloud-provider: external
            eviction-soft: memory.available<500Mi,nodefs.available<15%,nodefs.inodesFree<5%,imagefs.available<15%,pid.available<30%
            eviction-soft-grace-period: memory.available=30s,nodefs.available=2m,nodefs.inodesFree=1m,imagefs.available=2m,pid.available=1m
            eviction-hard: memory.available<200Mi,nodefs.available<10%,nodefs.inodesFree<3%,imagefs.available<10%,pid.available<20%
            eviction-minimum-reclaim: imagefs.available=5%,memory.available=100Mi,nodefs.available=5%
            protect-kernel-defaults: "true"
            node-labels: role=worker,giantswarm.io/machine-deployment=test-wc-
          name: '@@HOSTNAME@@'
      files:
        - contentFrom:
            secret:
              key: worker-node-azure.json
              name: test-wc--55abf9fd-azure-json
          owner: root:root
          path: /etc/kubernetes/azure.json
          permissions: "0644"
        - path: /opt/bin/calculate_kubelet_reservations.sh
          permissions: "0754"
          encoding: base64
          content: IyEvYmluL2Jhc2gKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDA0LFNDMjIwNixTQzIxNTUKc2V0IC1lCgojIFZhbHVlcyBmb3IgcmVzZXJ2YXRpb24gY29waWVkIGZyb20gaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2t1YmVybmV0ZXMtZW5naW5lL2RvY3MvY29uY2VwdHMvY2x1c3Rlci1hcmNoaXRlY3R1cmUjbWVtb3J5X2NwdQojIENvZGUgY29waWVkIG1vc3RseSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3NsYWJzL2FtYXpvbi1la3MtYW1pL2Jsb2IvbWFzdGVyL2ZpbGVzL2Jvb3RzdHJhcC5zaCNMNDQ2CgojIEhlbHBlciBmdW5jdGlvbiB3aGljaCBjYWxjdWxhdGVzIHRoZSBhbW91bnQgb2YgdGhlIGdpdmVuIHJlc291cmNlIChlaXRoZXIgQ1BVIG9yIG1lbW9yeSkKIyB0byByZXNlcnZlIGluIGEgZ2l2ZW4gcmVzb3VyY2UgcmFuZ2UsIHNwZWNpZmllZCBieSBhIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHJhbmdlIGFuZCBhIHBlcmNlbnRhZ2UKIyBvZiB0aGUgcmVzb3VyY2UgdG8gcmVzZXJ2ZS4gTm90ZSB0aGF0IHdlIHJldHVybiB6ZXJvIGlmIHRoZSBzdGFydCBvZiB0aGUgcmVzb3VyY2UgcmFuZ2UgaXMKIyBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIHJlc291cmNlIGNhcGFjaXR5IG9uIHRoZSBub2RlLiBBZGRpdGlvbmFsbHksIGlmIHRoZSBlbmQgcmFuZ2UgZXhjZWVkcyB0aGUgdG90YWwKIyByZXNvdXJjZSBjYXBhY2l0eSBvZiB0aGUgbm9kZSwgd2UgdXNlIHRoZSB0b3RhbCByZXNvdXJjZSBjYXBhY2l0eSBhcyB0aGUgZW5kIG9mIHRoZSByYW5nZS4KIyBBcmdzOgojICAgJDEgdG90YWwgYXZhaWxhYmxlIHJlc291cmNlIG9uIHRoZSB3b3JrZXIgbm9kZSBpbiBpbnB1dCB1bml0IChlaXRoZXIgbWlsbGljb3JlcyBmb3IgQ1BVIG9yIE1pIGZvciBtZW1vcnkpCiMgICAkMiBzdGFydCBvZiB0aGUgcmVzb3VyY2UgcmFuZ2UgaW4gaW5wdXQgdW5pdAojICAgJDMgZW5kIG9mIHRoZSByZXNvdXJjZSByYW5nZSBpbiBpbnB1dCB1bml0CiMgICAkNCBwZXJjZW50YWdlIG9mIHJhbmdlIHRvIHJlc2VydmUgaW4gcGVyY2VudCoxMDAgKHRvIGFsbG93IGZvciB0d28gZGVjaW1hbCBkaWdpdHMpCiMgUmV0dXJuOgojICAgYW1vdW50IG9mIHJlc291cmNlIHRvIHJlc2VydmUgaW4gaW5wdXQgdW5pdApnZXRfcmVzb3VyY2VfdG9fcmVzZXJ2ZV9pbl9yYW5nZSgpIHsKICBsb2NhbCB0b3RhbF9yZXNvdXJjZV9vbl9pbnN0YW5jZT0kMQogIGxvY2FsIHN0YXJ0X3JhbmdlPSQyCiAgbG9jYWwgZW5kX3JhbmdlPSQzCiAgbG9jYWwgcGVyY2VudGFnZT0kNAogIHJlc291cmNlc190b19yZXNlcnZlPSIwIgogIGlmICgoJHRvdGFsX3Jlc291cmNlX29uX2luc3RhbmNlID4gJHN0YXJ0X3JhbmdlKSk7IHRoZW4KICAgIHJlc291cmNlc190b19yZXNlcnZlPSQoKCgoJHRvdGFsX3Jlc291cmNlX29uX2luc3RhbmNlIDwgJGVuZF9yYW5nZSA/ICR0b3RhbF9yZXNvdXJjZV9vbl9pbnN0YW5jZSA6ICRlbmRfcmFuZ2UpIC0gJHN0YXJ0X3JhbmdlKSAqICRwZXJjZW50YWdlIC8gMTAwIC8gMTAwKSkKICBmaQogIGVjaG8gJHJlc291cmNlc190b19yZXNlcnZlCn0KCiMgQ2FsY3VsYXRlcyB0aGUgYW1vdW50IG9mIENQVSB0byByZXNlcnZlIGZvciBrdWJlUmVzZXJ2ZWQgaW4gbWlsbGljb3JlcyBmcm9tIHRoZSB0b3RhbCBudW1iZXIgb2YgdkNQVXMgYXZhaWxhYmxlIG9uIHRoZSBpbnN0YW5jZS4KIyBGcm9tIHRoZSB0b3RhbCBjb3JlIGNhcGFjaXR5IG9mIHRoaXMgd29ya2VyIG5vZGUsIHdlIGNhbGN1bGF0ZSB0aGUgQ1BVIHJlc291cmNlcyB0byByZXNlcnZlIGJ5IHJlc2VydmluZyBhIHBlcmNlbnRhZ2UKIyBvZiB0aGUgYXZhaWxhYmxlIGNvcmVzIGluIGVhY2ggcmFuZ2UgdXAgdG8gdGhlIHRvdGFsIG51bWJlciBvZiBjb3JlcyBhdmFpbGFibGUgb24gdGhlIGluc3RhbmNlLgojIFdlIGFyZSB1c2luZyB0aGVzZSBDUFUgcmFuZ2VzIGZyb20gR0tFIChodHRwczovL2Nsb3VkLmdvb2dsZS5jb20va3ViZXJuZXRlcy1lbmdpbmUvZG9jcy9jb25jZXB0cy9jbHVzdGVyLWFyY2hpdGVjdHVyZSNub2RlX2FsbG9jYXRhYmxlKToKIyA2JSBvZiB0aGUgZmlyc3QgY29yZQojIDElIG9mIHRoZSBuZXh0IGNvcmUgKHVwIHRvIDIgY29yZXMpCiMgMC41JSBvZiB0aGUgbmV4dCAyIGNvcmVzICh1cCB0byA0IGNvcmVzKQojIDAuMjUlIG9mIGFueSBjb3JlcyBhYm92ZSA0IGNvcmVzCiMgUmV0dXJuOgojICAgQ1BVIHJlc291cmNlcyB0byByZXNlcnZlIGluIG1pbGxpY29yZXMgKG0pCmdldF9jcHVfbWlsbGljb3Jlc190b19yZXNlcnZlKCkgewogIGxvY2FsIHRvdGFsX2NwdV9vbl9pbnN0YW5jZT0kKCgkKG5wcm9jKSAqIDEwMDApKQogIGxvY2FsIGNwdV9yYW5nZXM9KDAgMTAwMCAyMDAwIDQwMDAgIiR0b3RhbF9jcHVfb25faW5zdGFuY2UiKQogIGxvY2FsIGNwdV9wZXJjZW50YWdlX3Jlc2VydmVkX2Zvcl9yYW5nZXM9KDYwMCAxMDAgNTAgMjUpCiAgY3B1X3RvX3Jlc2VydmU9IjQwIgogIGZvciBpIGluICIkeyFjcHVfcGVyY2VudGFnZV9yZXNlcnZlZF9mb3JfcmFuZ2VzW0BdfSI7IGRvCiAgICBsb2NhbCBzdGFydF9yYW5nZT0ke2NwdV9yYW5nZXNbJGldfQogICAgbG9jYWwgZW5kX3JhbmdlPSR7Y3B1X3Jhbmdlc1soKCRpICsgMSkpXX0KICAgIGxvY2FsIHBlcmNlbnRhZ2VfdG9fcmVzZXJ2ZV9mb3JfcmFuZ2U9JHtjcHVfcGVyY2VudGFnZV9yZXNlcnZlZF9mb3JfcmFuZ2VzWyRpXX0KICAgIGNwdV90b19yZXNlcnZlPSQoKCRjcHVfdG9fcmVzZXJ2ZSArICQoZ2V0X3Jlc291cmNlX3RvX3Jlc2VydmVfaW5fcmFuZ2UgIiR0b3RhbF9jcHVfb25faW5zdGFuY2UiICIkc3RhcnRfcmFuZ2UiICIkZW5kX3JhbmdlIiAiJHBlcmNlbnRhZ2VfdG9fcmVzZXJ2ZV9mb3JfcmFuZ2UiKSkpCiAgZG9uZQogIGVjaG8gJGNwdV90b19yZXNlcnZlCn0KCiMgTk9URSBJIHJlZHVjZWQgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGZpcnN0IDMgcmFuZ2VzCiMyNSUgb2YgdGhlIGZpcnN0IDQgR2lCIG9mIG1lbW9yeQojMjAlIG9mIHRoZSBuZXh0IDQgR2lCIG9mIG1lbW9yeSAodXAgdG8gOCBHaUIpCiMxMCUgb2YgdGhlIG5leHQgOCBHaUIgb2YgbWVtb3J5ICh1cCB0byAxNiBHaUIpCiM2JSBvZiB0aGUgbmV4dCAxMTIgR2lCIG9mIG1lbW9yeSAodXAgdG8gMTI4IEdpQikKIzIlIG9mIGFueSBtZW1vcnkgYWJvdmUgMTI4IEdpQgoKZ2V0X21lbW9yeV90b19yZXNlcnZlKCkgewogIGxvY2FsIHRvdGFsX21lbW9yeV9vbl9pbnN0YW5jZV9pbl9ieXRlcz0kKCBhd2sgJy9NZW1Ub3RhbC8ge3ByaW50ICQyfScgL3Byb2MvbWVtaW5mbyApCiAgbG9jYWwgbWVtb3J5X3Jhbmdlcz0oMCA0MDAwMDAwIDgwMDAwMDAgMTYwMDAwMDAgMTI4MDAwMDAwICR0b3RhbF9tZW1vcnlfb25faW5zdGFuY2VfaW5fYnl0ZXMpCiAgI2xvY2FsIG1lbW9yeV9wZXJjZW50YWdlX3Jlc2VydmVkX2Zvcl9yYW5nZXM9KDI1MDAgMjAwMCAxMDAwIDYwMCAyMDApCiAgbG9jYWwgbWVtb3J5X3BlcmNlbnRhZ2VfcmVzZXJ2ZWRfZm9yX3Jhbmdlcz0oMjAwMCAxNTAwIDgwMCA2MDAgMjAwKQogIG1lbW9yeV90b19yZXNlcnZlX2luX2tieXRlcz0iMCIKICBmb3IgaSBpbiAiJHshbWVtb3J5X3BlcmNlbnRhZ2VfcmVzZXJ2ZWRfZm9yX3Jhbmdlc1tAXX0iOyBkbwogICAgbG9jYWwgc3RhcnRfcmFuZ2U9JHttZW1vcnlfcmFuZ2VzWyRpXX0KICAgIGxvY2FsIGVuZF9yYW5nZT0ke21lbW9yeV9yYW5nZXNbKCgkaSArIDEpKV19CiAgICBsb2NhbCBwZXJjZW50YWdlX3RvX3Jlc2VydmVfZm9yX3JhbmdlPSR7bWVtb3J5X3BlcmNlbnRhZ2VfcmVzZXJ2ZWRfZm9yX3Jhbmdlc1skaV19CiAgICBtZW1vcnlfdG9fcmVzZXJ2ZV9pbl9rYnl0ZXM9JCgoJG1lbW9yeV90b19yZXNlcnZlX2luX2tieXRlcyArICQoZ2V0X3Jlc291cmNlX3RvX3Jlc2VydmVfaW5fcmFuZ2UgIiR0b3RhbF9tZW1vcnlfb25faW5zdGFuY2VfaW5fYnl0ZXMiICIkc3RhcnRfcmFuZ2UiICIkZW5kX3JhbmdlIiAiJHBlcmNlbnRhZ2VfdG9fcmVzZXJ2ZV9mb3JfcmFuZ2UiKSkpCiAgZG9uZQogICMgT3V0cHV0IGluIE1pCiAgZWNobyAkKCggJG1lbW9yeV90b19yZXNlcnZlX2luX2tieXRlcy8xMDI0ICkpCn0KCnNlZCAtaSAtZSAiL15LVUJFTEVUX0VYVFJBX0FSR1MvIHMvJC8gLS1rdWJlLXJlc2VydmVkPWNwdT0kKGdldF9jcHVfbWlsbGljb3Jlc190b19yZXNlcnZlKW0sbWVtb3J5PSQoZ2V0X21lbW9yeV90b19yZXNlcnZlKU1pLyIgL2V0Yy9zeXNjb25maWcva3ViZWxldAo=
        - path: /etc/teleport-join-token
          permissions: "0644"
          contentFrom:
            secret:
              name: test-wc-teleport-join-token
              key: joinToken
        - path: /opt/teleport-node-role.sh
          permissions: "0755"
          encoding: base64
          content: IyEvYmluL2Jhc2gKCiMgVGhpcyBzY3JpcHQgaXMgZXhlY3V0ZWQgYnkgVGVsZXBvcnQgZHluYW1pYyBsYWJlbCBjb25maWd1cmF0aW9uIHRvIGFzc2lnbiB0aGUgSzhzIHJvbGUgCiMgZm9yIHRoZSBub2RlIChjb250cm9sLXBsYW5lIG9yIHdvcmtlcikKCmlmIHN5c3RlbWN0bCBpcy1hY3RpdmUgLS1xdWlldCBrdWJlbGV0LnNlcnZpY2U7IHRoZW4KICAgIGlmIFsgLWUgIi9ldGMva3ViZXJuZXRlcy9tYW5pZmVzdHMva3ViZS1hcGlzZXJ2ZXIueWFtbCIgXTsgdGhlbgogICAgICAgIGVjaG8gImNvbnRyb2wtcGxhbmUiCiAgICBlbHNlCiAgICAgICAgZWNobyAid29ya2VyIgogICAgZmkKZWxzZQogICAgZWNobyAiIgpmaQo=
        - path: /etc/teleport.yaml
          permissions: "0644"
          encoding: base64
          content: dmVyc2lvbjogdjMKdGVsZXBvcnQ6CiAgZGF0YV9kaXI6IC92YXIvbGliL3RlbGVwb3J0CiAgam9pbl9wYXJhbXM6CiAgICB0b2tlbl9uYW1lOiAvZXRjL3RlbGVwb3J0LWpvaW4tdG9rZW4KICAgIG1ldGhvZDogdG9rZW4KICBwcm94eV9zZXJ2ZXI6IHRlbGVwb3J0LmdpYW50c3dhcm0uaW86NDQzCiAgbG9nOgogICAgb3V0cHV0OiBzdGRlcnIKICAgIHNldmVyaXR5OiBJTkZPCiAgICBmb3JtYXQ6CiAgICAgIG91dHB1dDogdGV4dAogIGNhX3BpbjogIiIKICBkaWFnX2FkZHI6ICIiCmF1dGhfc2VydmljZToKICBlbmFibGVkOiAibm8iCnNzaF9zZXJ2aWNlOgogIGVuYWJsZWQ6ICJ5ZXMiCiAgY29tbWFuZHM6CiAgLSBuYW1lOiBub2RlCiAgICBjb21tYW5kOiBbaG9zdG5hbWVdCiAgICBwZXJpb2Q6IDI0aDBtMHMKICAtIG5hbWU6IGFyY2gKICAgIGNvbW1hbmQ6IFt1bmFtZSwgLW1dCiAgICBwZXJpb2Q6IDI0aDBtMHMKICAtIG5hbWU6IHJvbGUKICAgIGNvbW1hbmQ6IFsvb3B0L3RlbGVwb3J0LW5vZGUtcm9sZS5zaF0KICAgIHBlcmlvZDogMW0wcwogIGxhYmVsczoKICAgIGluczogTUNDTFVTVEVSCiAgICBtYzogTUNDTFVTVEVSCiAgICBjbHVzdGVyOiB0ZXN0LXdjCiAgICBiYXNlRG9tYWluOiBhenVyZXRlc3QuZ2lnYW50aWMuaW8KcHJveHlfc2VydmljZToKICBlbmFibGVkOiAibm8iCiAgaHR0cHNfa2V5cGFpcnM6IFtdCiAgaHR0cHNfa2V5cGFpcnNfcmVsb2FkX2ludGVydmFsOiAwcwogIGFjbWU6IHt9Cg==
        - path: /etc/sysctl.d/10_giantswarm_tuning.conf
          permissions: "0444"
          encoding: base64
          content: IyBGb2xsb3dpbmcgU2V0dGluZ3MgaGF2ZSBiZWVuIGltcG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dpYW50c3dhcm0vazhzY2xvdWRjb25maWcvYmxvYi9tYXN0ZXIvZmlsZXMvY29uZi9oYXJkZW5pbmcuY29uZgojIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2lhbnRzd2FybS9yb2FkbWFwL2lzc3Vlcy8xNjU5I2lzc3VlY29tbWVudC0xNDUyMzU5NDY4CgoKIyBGb2xsb3dpbmcgQVJQIFNldHRpbmdzIGFyZSBmcm9tIFZvZGFmb25lIFNlY3VyaXR5IEhhcmRlbmluZwojIG5ldC5pcHY0LmNvbmYuYWxsLnJwX2ZpbHRlciA9IDEgIyB0aGlzIGlzIG92ZXJyaWRlbiBieSBjaWxpdW0gc28gZGlzYWJsaW5nIGl0IGhlcmUKbmV0LmlwdjQuY29uZi5hbGwuYXJwX2lnbm9yZSA9IDEKbmV0LmlwdjQuY29uZi5hbGwuYXJwX2Fubm91bmNlID0gMgoKIyBSZXNlcnZlZCB0byBhdm9pZCBjb25mbGljdHMgd2l0aCBrdWJlLWFwaXNlcnZlciwgd2hpY2ggYWxsb2NhdGVzIG5vZGUtcG9ydHMgd2l0aGluIHRoaXMgcmFuZ2UKIyAtLXNlcnZpY2Utbm9kZS1wb3J0LXJhbmdlIDxhIHN0cmluZyBpbiB0aGUgZm9ybSAnTjEtTjInPiAgICAgRGVmYXVsdDogMzAwMDAtMzI3NjcKbmV0LmlwdjQuaXBfbG9jYWxfcmVzZXJ2ZWRfcG9ydHM9MzAwMDAtMzI3NjcKCiMgSW5jcmVhc2VkIG1tYXBmcyBiZWNhdXNlIHNvbWUgYXBwbGljYXRpb25zLCBsaWtlIEVTLCBuZWVkIGhpZ2hlciBsaW1pdCB0byBzdG9yZSBkYXRhIHByb3Blcmx5CnZtLm1heF9tYXBfY291bnQgPSAyNjIxNDQKCm5ldC5pcHY2LmNvbmYuYWxsLmFjY2VwdF9yZWRpcmVjdHMgPSAwCm5ldC5pcHY2LmNvbmYuZGVmYXVsdC5hY2NlcHRfcmVkaXJlY3RzID0gMAoKbmV0LmlwdjQuY29uZi5hbGwubG9nX21hcnRpYW5zID0gMQpuZXQuaXB2NC5jb25mLmFsbC5zZW5kX3JlZGlyZWN0cyA9IDAKbmV0LmlwdjQuY29uZi5kZWZhdWx0LmFjY2VwdF9yZWRpcmVjdHMgPSAwCm5ldC5pcHY0LmNvbmYuZGVmYXVsdC5sb2dfbWFydGlhbnMgPSAxCm5ldC5pcHY0LnRjcF90aW1lc3RhbXBzID0gMAoKZnMuaW5vdGlmeS5tYXhfdXNlcl93YXRjaGVzID0gMTYzODQKIyBEZWZhdWx0IGlzIDEyOCwgZG91YmxpbmcgZm9yIG5vZGVzIHdpdGggbWFueSBwb2RzCiMgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9naWFudHN3YXJtL2dpYW50c3dhcm0vaXNzdWVzLzc3MTEKZnMuaW5vdGlmeS5tYXhfdXNlcl9pbnN0YW5jZXMgPSA4MTkyCgprZXJuZWwua3B0cl9yZXN0cmljdCA9IDIKa2VybmVsLnN5c3JxID0gMAo=
        - path: /etc/audit/rules.d/99-default.rules
          permissions: "0444"
          encoding: base64
          content: IyBPdmVycmlkZGVuIGJ5IEdpYW50IFN3YXJtLgotYSBleGl0LGFsd2F5cyAtRiBhcmNoPWI2NCAtUyBleGVjdmUgLWsgYXVkaXRpbmcKLWEgZXhpdCxhbHdheXMgLUYgYXJjaD1iMzIgLVMgZXhlY3ZlIC1rIGF1ZGl0aW5nCg==
        - path: /etc/containerd/config.toml
          permissions: "0644"
          contentFrom:
            secret:
              name: test-wc-containerd-configuration
              key: registry-config.toml
      preKubeadmCommands:
        - /bin/test ! -d /var/lib/kubelet && (/bin/mkdir -p /var/lib/kubelet && /bin/chmod 0750 /var/lib/kubelet)
        - /opt/bin/calculate_kubelet_reservations.sh
        - sed -i "s/'@@HOSTNAME@@'/$(curl -s -H Metadata:true --noproxy '*' 'http://169.254.169.254/metadata/instance?api-version=2020-09-01' | jq -r .compute.name)/g" /etc/kubeadm.yml
        - sed -i -e 's/registry.k8s.io\/pause/quay.io\/giantswarm\/pause/' /etc/sysconfig/kubelet
      postKubeadmCommands: []
---
# Source: cluster-azure/templates/list.yaml
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  labels:
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
  name: test-wc
  namespace: org-giantswarm
spec:
  machineTemplate:
    metadata:
      labels:
        app: "cluster-azure"
        app.kubernetes.io/managed-by: "Helm"
        cluster.x-k8s.io/cluster-name: "test-wc"
        giantswarm.io/cluster: "test-wc"
        giantswarm.io/organization: "test"
        app.kubernetes.io/version: ""
        helm.sh/chart: "cluster-azure-0.0.0-dev"
        application.giantswarm.io/team: "phoenix"
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: test-wc-control-plane-41ff2439
  kubeadmConfigSpec:
    # Workaround for https://github.com/kubernetes-sigs/cluster-api/issues/7679.
    # Don't define partitions here, they are defined in "ignition.containerLinuxConfig.additionalConfig"
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
        overwrite: false
      - device: /dev/disk/azure/scsi1/lun1
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: containerd_disk
        overwrite: false
      - device: /dev/disk/azure/scsi1/lun2
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: kubelet_disk
        overwrite: false
      #partitions:
      #- device: /dev/disk/azure/scsi1/lun0
      #  layout: true
      #  tableType: gpt
      #  overwrite: false
    mounts:
    - - etcd_disk
      - /var/lib/etcddisk
    - - containerd_disk
      - /var/lib/containerd
    - - kubelet_disk
      - /var/lib/kubelet
    format: ignition
    ignition:
      containerLinuxConfig:
        additionalConfig: |
          systemd:
            units:
            - name: kubeadm.service
              dropins:
              - name: 10-flatcar.conf
                contents: |
                  [Unit]
                  After=oem-cloudinit.service
            - name: teleport.service
              enabled: true
              contents: |
                [Unit]
                Description=Teleport Service
                After=network.target
            
                [Service]
                Type=simple
                Restart=on-failure
                ExecStart=/opt/bin/teleport start --roles=node --config=/etc/teleport.yaml --pid-file=/run/teleport.pid
                ExecReload=/bin/kill -HUP $MAINPID
                PIDFile=/run/teleport.pid
                LimitNOFILE=524288
            
                [Install]
                WantedBy=multi-user.target
          # Workaround for https://github.com/kubernetes-sigs/cluster-api/issues/7679.
          # Filesystems is defined in `kubeadmConfigSpec.diskSetup` because without it the `mounts` section does not generate any mount unit
          storage:
            disks:
            - device: /dev/disk/azure/scsi1/lun0
              partitions:
              - number: 1
            #filesystems:
            #- name: etcd_disk
            #  mount:
            #    device: /dev/disk/azure/scsi1/lun0
            #    format: ext4
            #    label: etcd_disk
            #    path: /var/lib/etcddisk
            #    options:
            #    - -E
            #    - lazy_itable_init=1,lazy_journal_init=1
    clusterConfiguration:
      # Avoid accessibility issues (e.g. on private clusters) and potential future rate limits for the default `registry.k8s.io`
      imageRepository: gsoci.azurecr.io/giantswarm
      apiServer:
        certSANs:
          - 127.0.0.1
          - localhost
          - "api.test-wc.azuretest.gigantic.io"
          - "apiserver.test-wc.azuretest.gigantic.io"
        extraArgs:
          cloud-provider: external
          cloud-config: /etc/kubernetes/azure.json
          oidc-issuer-url: https://dex.cluster.azuretest.gigantic.io
          oidc-client-id: dex-k8s-authenticator
          oidc-username-claim: email
          oidc-groups-claim: groups
          audit-log-maxage: "30"
          audit-log-maxbackup: "30"
          audit-log-maxsize: "100"
          audit-log-path: /var/log/apiserver/audit.log
          audit-policy-file: /etc/kubernetes/policies/audit-policy.yaml
          encryption-provider-config: /etc/kubernetes/encryption/config.yaml
          enable-admission-plugins: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,DefaultStorageClass,PersistentVolumeClaimResize,Priority,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook
          feature-gates: 
          kubelet-preferred-address-types: InternalIP
          profiling: "false"
          runtime-config: api/all=true,scheduling.k8s.io/v1alpha1=true
          service-account-lookup: "true"
          tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
          service-cluster-ip-range:  172.31.0.0/16
        extraVolumes:
        - name: auditlog
          hostPath: /var/log/apiserver
          mountPath: /var/log/apiserver
          readOnly: false
          pathType: DirectoryOrCreate
        - name: policies
          hostPath: /etc/kubernetes/policies
          mountPath: /etc/kubernetes/policies
          readOnly: false
          pathType: DirectoryOrCreate
        - name: encryption
          hostPath: /etc/kubernetes/encryption
          mountPath: /etc/kubernetes/encryption
          readOnly: false
          pathType: DirectoryOrCreate
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          authorization-always-allow-paths: "/healthz,/readyz,/livez,/metrics"
          bind-address: "0.0.0.0"
          logtostderr: "true"
          profiling: "false"
          terminated-pod-gc-threshold: "125"
          allocate-node-cidrs: "true"
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: external
          cluster-name: test-wc
          external-cloud-volume-plugin: azure
          feature-gates: 
        extraVolumes:
          - hostPath: /etc/kubernetes/azure.json
            mountPath: /etc/kubernetes/azure.json
            name: cloud-config
            readOnly: true
      scheduler:
        extraArgs:
          authorization-always-allow-paths: "/healthz,/readyz,/livez,/metrics"
          bind-address: "0.0.0.0"
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            listen-metrics-urls: "http://0.0.0.0:2381"
            quota-backend-bytes: "8589934592"
      networking:
        serviceSubnet: "172.31.0.0/16"
    files:
    
    - path: /etc/teleport-join-token
      permissions: "0644"
      contentFrom:
        secret:
          name: test-wc-teleport-join-token
          key: joinToken
    - path: /opt/teleport-node-role.sh
      permissions: "0755"
      encoding: base64
      content: IyEvYmluL2Jhc2gKCiMgVGhpcyBzY3JpcHQgaXMgZXhlY3V0ZWQgYnkgVGVsZXBvcnQgZHluYW1pYyBsYWJlbCBjb25maWd1cmF0aW9uIHRvIGFzc2lnbiB0aGUgSzhzIHJvbGUgCiMgZm9yIHRoZSBub2RlIChjb250cm9sLXBsYW5lIG9yIHdvcmtlcikKCmlmIHN5c3RlbWN0bCBpcy1hY3RpdmUgLS1xdWlldCBrdWJlbGV0LnNlcnZpY2U7IHRoZW4KICAgIGlmIFsgLWUgIi9ldGMva3ViZXJuZXRlcy9tYW5pZmVzdHMva3ViZS1hcGlzZXJ2ZXIueWFtbCIgXTsgdGhlbgogICAgICAgIGVjaG8gImNvbnRyb2wtcGxhbmUiCiAgICBlbHNlCiAgICAgICAgZWNobyAid29ya2VyIgogICAgZmkKZWxzZQogICAgZWNobyAiIgpmaQo=
    - path: /etc/teleport.yaml
      permissions: "0644"
      encoding: base64
      content: dmVyc2lvbjogdjMKdGVsZXBvcnQ6CiAgZGF0YV9kaXI6IC92YXIvbGliL3RlbGVwb3J0CiAgam9pbl9wYXJhbXM6CiAgICB0b2tlbl9uYW1lOiAvZXRjL3RlbGVwb3J0LWpvaW4tdG9rZW4KICAgIG1ldGhvZDogdG9rZW4KICBwcm94eV9zZXJ2ZXI6IHRlbGVwb3J0LmdpYW50c3dhcm0uaW86NDQzCiAgbG9nOgogICAgb3V0cHV0OiBzdGRlcnIKICAgIHNldmVyaXR5OiBJTkZPCiAgICBmb3JtYXQ6CiAgICAgIG91dHB1dDogdGV4dAogIGNhX3BpbjogIiIKICBkaWFnX2FkZHI6ICIiCmF1dGhfc2VydmljZToKICBlbmFibGVkOiAibm8iCnNzaF9zZXJ2aWNlOgogIGVuYWJsZWQ6ICJ5ZXMiCiAgY29tbWFuZHM6CiAgLSBuYW1lOiBub2RlCiAgICBjb21tYW5kOiBbaG9zdG5hbWVdCiAgICBwZXJpb2Q6IDI0aDBtMHMKICAtIG5hbWU6IGFyY2gKICAgIGNvbW1hbmQ6IFt1bmFtZSwgLW1dCiAgICBwZXJpb2Q6IDI0aDBtMHMKICAtIG5hbWU6IHJvbGUKICAgIGNvbW1hbmQ6IFsvb3B0L3RlbGVwb3J0LW5vZGUtcm9sZS5zaF0KICAgIHBlcmlvZDogMW0wcwogIGxhYmVsczoKICAgIGluczogTUNDTFVTVEVSCiAgICBtYzogTUNDTFVTVEVSCiAgICBjbHVzdGVyOiB0ZXN0LXdjCiAgICBiYXNlRG9tYWluOiBhenVyZXRlc3QuZ2lnYW50aWMuaW8KcHJveHlfc2VydmljZToKICBlbmFibGVkOiAibm8iCiAgaHR0cHNfa2V5cGFpcnM6IFtdCiAgaHR0cHNfa2V5cGFpcnNfcmVsb2FkX2ludGVydmFsOiAwcwogIGFjbWU6IHt9Cg==
    - path: /opt/bin/calculate_kubelet_reservations.sh
      permissions: "0754"
      encoding: base64
      content: IyEvYmluL2Jhc2gKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDA0LFNDMjIwNixTQzIxNTUKc2V0IC1lCgojIFZhbHVlcyBmb3IgcmVzZXJ2YXRpb24gY29waWVkIGZyb20gaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2t1YmVybmV0ZXMtZW5naW5lL2RvY3MvY29uY2VwdHMvY2x1c3Rlci1hcmNoaXRlY3R1cmUjbWVtb3J5X2NwdQojIENvZGUgY29waWVkIG1vc3RseSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3NsYWJzL2FtYXpvbi1la3MtYW1pL2Jsb2IvbWFzdGVyL2ZpbGVzL2Jvb3RzdHJhcC5zaCNMNDQ2CgojIEhlbHBlciBmdW5jdGlvbiB3aGljaCBjYWxjdWxhdGVzIHRoZSBhbW91bnQgb2YgdGhlIGdpdmVuIHJlc291cmNlIChlaXRoZXIgQ1BVIG9yIG1lbW9yeSkKIyB0byByZXNlcnZlIGluIGEgZ2l2ZW4gcmVzb3VyY2UgcmFuZ2UsIHNwZWNpZmllZCBieSBhIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHJhbmdlIGFuZCBhIHBlcmNlbnRhZ2UKIyBvZiB0aGUgcmVzb3VyY2UgdG8gcmVzZXJ2ZS4gTm90ZSB0aGF0IHdlIHJldHVybiB6ZXJvIGlmIHRoZSBzdGFydCBvZiB0aGUgcmVzb3VyY2UgcmFuZ2UgaXMKIyBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIHJlc291cmNlIGNhcGFjaXR5IG9uIHRoZSBub2RlLiBBZGRpdGlvbmFsbHksIGlmIHRoZSBlbmQgcmFuZ2UgZXhjZWVkcyB0aGUgdG90YWwKIyByZXNvdXJjZSBjYXBhY2l0eSBvZiB0aGUgbm9kZSwgd2UgdXNlIHRoZSB0b3RhbCByZXNvdXJjZSBjYXBhY2l0eSBhcyB0aGUgZW5kIG9mIHRoZSByYW5nZS4KIyBBcmdzOgojICAgJDEgdG90YWwgYXZhaWxhYmxlIHJlc291cmNlIG9uIHRoZSB3b3JrZXIgbm9kZSBpbiBpbnB1dCB1bml0IChlaXRoZXIgbWlsbGljb3JlcyBmb3IgQ1BVIG9yIE1pIGZvciBtZW1vcnkpCiMgICAkMiBzdGFydCBvZiB0aGUgcmVzb3VyY2UgcmFuZ2UgaW4gaW5wdXQgdW5pdAojICAgJDMgZW5kIG9mIHRoZSByZXNvdXJjZSByYW5nZSBpbiBpbnB1dCB1bml0CiMgICAkNCBwZXJjZW50YWdlIG9mIHJhbmdlIHRvIHJlc2VydmUgaW4gcGVyY2VudCoxMDAgKHRvIGFsbG93IGZvciB0d28gZGVjaW1hbCBkaWdpdHMpCiMgUmV0dXJuOgojICAgYW1vdW50IG9mIHJlc291cmNlIHRvIHJlc2VydmUgaW4gaW5wdXQgdW5pdApnZXRfcmVzb3VyY2VfdG9fcmVzZXJ2ZV9pbl9yYW5nZSgpIHsKICBsb2NhbCB0b3RhbF9yZXNvdXJjZV9vbl9pbnN0YW5jZT0kMQogIGxvY2FsIHN0YXJ0X3JhbmdlPSQyCiAgbG9jYWwgZW5kX3JhbmdlPSQzCiAgbG9jYWwgcGVyY2VudGFnZT0kNAogIHJlc291cmNlc190b19yZXNlcnZlPSIwIgogIGlmICgoJHRvdGFsX3Jlc291cmNlX29uX2luc3RhbmNlID4gJHN0YXJ0X3JhbmdlKSk7IHRoZW4KICAgIHJlc291cmNlc190b19yZXNlcnZlPSQoKCgoJHRvdGFsX3Jlc291cmNlX29uX2luc3RhbmNlIDwgJGVuZF9yYW5nZSA/ICR0b3RhbF9yZXNvdXJjZV9vbl9pbnN0YW5jZSA6ICRlbmRfcmFuZ2UpIC0gJHN0YXJ0X3JhbmdlKSAqICRwZXJjZW50YWdlIC8gMTAwIC8gMTAwKSkKICBmaQogIGVjaG8gJHJlc291cmNlc190b19yZXNlcnZlCn0KCiMgQ2FsY3VsYXRlcyB0aGUgYW1vdW50IG9mIENQVSB0byByZXNlcnZlIGZvciBrdWJlUmVzZXJ2ZWQgaW4gbWlsbGljb3JlcyBmcm9tIHRoZSB0b3RhbCBudW1iZXIgb2YgdkNQVXMgYXZhaWxhYmxlIG9uIHRoZSBpbnN0YW5jZS4KIyBGcm9tIHRoZSB0b3RhbCBjb3JlIGNhcGFjaXR5IG9mIHRoaXMgd29ya2VyIG5vZGUsIHdlIGNhbGN1bGF0ZSB0aGUgQ1BVIHJlc291cmNlcyB0byByZXNlcnZlIGJ5IHJlc2VydmluZyBhIHBlcmNlbnRhZ2UKIyBvZiB0aGUgYXZhaWxhYmxlIGNvcmVzIGluIGVhY2ggcmFuZ2UgdXAgdG8gdGhlIHRvdGFsIG51bWJlciBvZiBjb3JlcyBhdmFpbGFibGUgb24gdGhlIGluc3RhbmNlLgojIFdlIGFyZSB1c2luZyB0aGVzZSBDUFUgcmFuZ2VzIGZyb20gR0tFIChodHRwczovL2Nsb3VkLmdvb2dsZS5jb20va3ViZXJuZXRlcy1lbmdpbmUvZG9jcy9jb25jZXB0cy9jbHVzdGVyLWFyY2hpdGVjdHVyZSNub2RlX2FsbG9jYXRhYmxlKToKIyA2JSBvZiB0aGUgZmlyc3QgY29yZQojIDElIG9mIHRoZSBuZXh0IGNvcmUgKHVwIHRvIDIgY29yZXMpCiMgMC41JSBvZiB0aGUgbmV4dCAyIGNvcmVzICh1cCB0byA0IGNvcmVzKQojIDAuMjUlIG9mIGFueSBjb3JlcyBhYm92ZSA0IGNvcmVzCiMgUmV0dXJuOgojICAgQ1BVIHJlc291cmNlcyB0byByZXNlcnZlIGluIG1pbGxpY29yZXMgKG0pCmdldF9jcHVfbWlsbGljb3Jlc190b19yZXNlcnZlKCkgewogIGxvY2FsIHRvdGFsX2NwdV9vbl9pbnN0YW5jZT0kKCgkKG5wcm9jKSAqIDEwMDApKQogIGxvY2FsIGNwdV9yYW5nZXM9KDAgMTAwMCAyMDAwIDQwMDAgIiR0b3RhbF9jcHVfb25faW5zdGFuY2UiKQogIGxvY2FsIGNwdV9wZXJjZW50YWdlX3Jlc2VydmVkX2Zvcl9yYW5nZXM9KDYwMCAxMDAgNTAgMjUpCiAgY3B1X3RvX3Jlc2VydmU9IjQwIgogIGZvciBpIGluICIkeyFjcHVfcGVyY2VudGFnZV9yZXNlcnZlZF9mb3JfcmFuZ2VzW0BdfSI7IGRvCiAgICBsb2NhbCBzdGFydF9yYW5nZT0ke2NwdV9yYW5nZXNbJGldfQogICAgbG9jYWwgZW5kX3JhbmdlPSR7Y3B1X3Jhbmdlc1soKCRpICsgMSkpXX0KICAgIGxvY2FsIHBlcmNlbnRhZ2VfdG9fcmVzZXJ2ZV9mb3JfcmFuZ2U9JHtjcHVfcGVyY2VudGFnZV9yZXNlcnZlZF9mb3JfcmFuZ2VzWyRpXX0KICAgIGNwdV90b19yZXNlcnZlPSQoKCRjcHVfdG9fcmVzZXJ2ZSArICQoZ2V0X3Jlc291cmNlX3RvX3Jlc2VydmVfaW5fcmFuZ2UgIiR0b3RhbF9jcHVfb25faW5zdGFuY2UiICIkc3RhcnRfcmFuZ2UiICIkZW5kX3JhbmdlIiAiJHBlcmNlbnRhZ2VfdG9fcmVzZXJ2ZV9mb3JfcmFuZ2UiKSkpCiAgZG9uZQogIGVjaG8gJGNwdV90b19yZXNlcnZlCn0KCiMgTk9URSBJIHJlZHVjZWQgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGZpcnN0IDMgcmFuZ2VzCiMyNSUgb2YgdGhlIGZpcnN0IDQgR2lCIG9mIG1lbW9yeQojMjAlIG9mIHRoZSBuZXh0IDQgR2lCIG9mIG1lbW9yeSAodXAgdG8gOCBHaUIpCiMxMCUgb2YgdGhlIG5leHQgOCBHaUIgb2YgbWVtb3J5ICh1cCB0byAxNiBHaUIpCiM2JSBvZiB0aGUgbmV4dCAxMTIgR2lCIG9mIG1lbW9yeSAodXAgdG8gMTI4IEdpQikKIzIlIG9mIGFueSBtZW1vcnkgYWJvdmUgMTI4IEdpQgoKZ2V0X21lbW9yeV90b19yZXNlcnZlKCkgewogIGxvY2FsIHRvdGFsX21lbW9yeV9vbl9pbnN0YW5jZV9pbl9ieXRlcz0kKCBhd2sgJy9NZW1Ub3RhbC8ge3ByaW50ICQyfScgL3Byb2MvbWVtaW5mbyApCiAgbG9jYWwgbWVtb3J5X3Jhbmdlcz0oMCA0MDAwMDAwIDgwMDAwMDAgMTYwMDAwMDAgMTI4MDAwMDAwICR0b3RhbF9tZW1vcnlfb25faW5zdGFuY2VfaW5fYnl0ZXMpCiAgI2xvY2FsIG1lbW9yeV9wZXJjZW50YWdlX3Jlc2VydmVkX2Zvcl9yYW5nZXM9KDI1MDAgMjAwMCAxMDAwIDYwMCAyMDApCiAgbG9jYWwgbWVtb3J5X3BlcmNlbnRhZ2VfcmVzZXJ2ZWRfZm9yX3Jhbmdlcz0oMjAwMCAxNTAwIDgwMCA2MDAgMjAwKQogIG1lbW9yeV90b19yZXNlcnZlX2luX2tieXRlcz0iMCIKICBmb3IgaSBpbiAiJHshbWVtb3J5X3BlcmNlbnRhZ2VfcmVzZXJ2ZWRfZm9yX3Jhbmdlc1tAXX0iOyBkbwogICAgbG9jYWwgc3RhcnRfcmFuZ2U9JHttZW1vcnlfcmFuZ2VzWyRpXX0KICAgIGxvY2FsIGVuZF9yYW5nZT0ke21lbW9yeV9yYW5nZXNbKCgkaSArIDEpKV19CiAgICBsb2NhbCBwZXJjZW50YWdlX3RvX3Jlc2VydmVfZm9yX3JhbmdlPSR7bWVtb3J5X3BlcmNlbnRhZ2VfcmVzZXJ2ZWRfZm9yX3Jhbmdlc1skaV19CiAgICBtZW1vcnlfdG9fcmVzZXJ2ZV9pbl9rYnl0ZXM9JCgoJG1lbW9yeV90b19yZXNlcnZlX2luX2tieXRlcyArICQoZ2V0X3Jlc291cmNlX3RvX3Jlc2VydmVfaW5fcmFuZ2UgIiR0b3RhbF9tZW1vcnlfb25faW5zdGFuY2VfaW5fYnl0ZXMiICIkc3RhcnRfcmFuZ2UiICIkZW5kX3JhbmdlIiAiJHBlcmNlbnRhZ2VfdG9fcmVzZXJ2ZV9mb3JfcmFuZ2UiKSkpCiAgZG9uZQogICMgT3V0cHV0IGluIE1pCiAgZWNobyAkKCggJG1lbW9yeV90b19yZXNlcnZlX2luX2tieXRlcy8xMDI0ICkpCn0KCnNlZCAtaSAtZSAiL15LVUJFTEVUX0VYVFJBX0FSR1MvIHMvJC8gLS1rdWJlLXJlc2VydmVkPWNwdT0kKGdldF9jcHVfbWlsbGljb3Jlc190b19yZXNlcnZlKW0sbWVtb3J5PSQoZ2V0X21lbW9yeV90b19yZXNlcnZlKU1pLyIgL2V0Yy9zeXNjb25maWcva3ViZWxldAo=
    - path: /etc/sysctl.d/10_giantswarm_tuning.conf
      permissions: "0444"
      encoding: base64
      content: IyBGb2xsb3dpbmcgU2V0dGluZ3MgaGF2ZSBiZWVuIGltcG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dpYW50c3dhcm0vazhzY2xvdWRjb25maWcvYmxvYi9tYXN0ZXIvZmlsZXMvY29uZi9oYXJkZW5pbmcuY29uZgojIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2lhbnRzd2FybS9yb2FkbWFwL2lzc3Vlcy8xNjU5I2lzc3VlY29tbWVudC0xNDUyMzU5NDY4CgoKIyBGb2xsb3dpbmcgQVJQIFNldHRpbmdzIGFyZSBmcm9tIFZvZGFmb25lIFNlY3VyaXR5IEhhcmRlbmluZwojIG5ldC5pcHY0LmNvbmYuYWxsLnJwX2ZpbHRlciA9IDEgIyB0aGlzIGlzIG92ZXJyaWRlbiBieSBjaWxpdW0gc28gZGlzYWJsaW5nIGl0IGhlcmUKbmV0LmlwdjQuY29uZi5hbGwuYXJwX2lnbm9yZSA9IDEKbmV0LmlwdjQuY29uZi5hbGwuYXJwX2Fubm91bmNlID0gMgoKIyBSZXNlcnZlZCB0byBhdm9pZCBjb25mbGljdHMgd2l0aCBrdWJlLWFwaXNlcnZlciwgd2hpY2ggYWxsb2NhdGVzIG5vZGUtcG9ydHMgd2l0aGluIHRoaXMgcmFuZ2UKIyAtLXNlcnZpY2Utbm9kZS1wb3J0LXJhbmdlIDxhIHN0cmluZyBpbiB0aGUgZm9ybSAnTjEtTjInPiAgICAgRGVmYXVsdDogMzAwMDAtMzI3NjcKbmV0LmlwdjQuaXBfbG9jYWxfcmVzZXJ2ZWRfcG9ydHM9MzAwMDAtMzI3NjcKCiMgSW5jcmVhc2VkIG1tYXBmcyBiZWNhdXNlIHNvbWUgYXBwbGljYXRpb25zLCBsaWtlIEVTLCBuZWVkIGhpZ2hlciBsaW1pdCB0byBzdG9yZSBkYXRhIHByb3Blcmx5CnZtLm1heF9tYXBfY291bnQgPSAyNjIxNDQKCm5ldC5pcHY2LmNvbmYuYWxsLmFjY2VwdF9yZWRpcmVjdHMgPSAwCm5ldC5pcHY2LmNvbmYuZGVmYXVsdC5hY2NlcHRfcmVkaXJlY3RzID0gMAoKbmV0LmlwdjQuY29uZi5hbGwubG9nX21hcnRpYW5zID0gMQpuZXQuaXB2NC5jb25mLmFsbC5zZW5kX3JlZGlyZWN0cyA9IDAKbmV0LmlwdjQuY29uZi5kZWZhdWx0LmFjY2VwdF9yZWRpcmVjdHMgPSAwCm5ldC5pcHY0LmNvbmYuZGVmYXVsdC5sb2dfbWFydGlhbnMgPSAxCm5ldC5pcHY0LnRjcF90aW1lc3RhbXBzID0gMAoKZnMuaW5vdGlmeS5tYXhfdXNlcl93YXRjaGVzID0gMTYzODQKIyBEZWZhdWx0IGlzIDEyOCwgZG91YmxpbmcgZm9yIG5vZGVzIHdpdGggbWFueSBwb2RzCiMgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9naWFudHN3YXJtL2dpYW50c3dhcm0vaXNzdWVzLzc3MTEKZnMuaW5vdGlmeS5tYXhfdXNlcl9pbnN0YW5jZXMgPSA4MTkyCgprZXJuZWwua3B0cl9yZXN0cmljdCA9IDIKa2VybmVsLnN5c3JxID0gMAo=
    - path: /etc/audit/rules.d/99-default.rules
      permissions: "0444"
      encoding: base64
      content: IyBPdmVycmlkZGVuIGJ5IEdpYW50IFN3YXJtLgotYSBleGl0LGFsd2F5cyAtRiBhcmNoPWI2NCAtUyBleGVjdmUgLWsgYXVkaXRpbmcKLWEgZXhpdCxhbHdheXMgLUYgYXJjaD1iMzIgLVMgZXhlY3ZlIC1rIGF1ZGl0aW5nCg==
    - path: /etc/containerd/config.toml
      permissions: "0644"
      contentFrom:
        secret:
          name: test-wc-containerd-configuration
          key: registry-config.toml
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: test-wc-control-plane-41ff2439-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    - path: /etc/kubernetes/encryption/config.yaml
      permissions: "0600"
      contentFrom:
        secret:
          name: test-wc-encryption-provider-config
          key: encryption
    - path: /etc/kubernetes/policies/audit-policy.yaml
      permissions: "0600"
      encoding: base64
      content: YXBpVmVyc2lvbjogYXVkaXQuazhzLmlvL3YxCmtpbmQ6IFBvbGljeQpydWxlczoKICAjIFRoZSBmb2xsb3dpbmcgcmVxdWVzdHMgd2VyZSBtYW51YWxseSBpZGVudGlmaWVkIGFzIGhpZ2gtdm9sdW1lIGFuZCBsb3ctcmlzaywKICAjIHNvIGRyb3AgdGhlbS4KICAtIGxldmVsOiBOb25lCiAgICB1c2VyczogWyJzeXN0ZW06a3ViZS1wcm94eSJdCiAgICB2ZXJiczogWyJ3YXRjaCJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gZ3JvdXA6ICIiICMgY29yZQogICAgICAgIHJlc291cmNlczogWyJlbmRwb2ludHMiLCAic2VydmljZXMiLCAic2VydmljZXMvc3RhdHVzIl0KICAtIGxldmVsOiBOb25lCiAgICAjIEluZ3Jlc3MgY29udHJvbGxlciByZWFkcyAnY29uZmlnbWFwcy9pbmdyZXNzLXVpZCcgdGhyb3VnaCB0aGUgdW5zZWN1cmVkIHBvcnQuCiAgICB1c2VyczogWyJzeXN0ZW06dW5zZWN1cmVkIl0KICAgIG5hbWVzcGFjZXM6IFsia3ViZS1zeXN0ZW0iXQogICAgdmVyYnM6IFsiZ2V0Il0KICAgIHJlc291cmNlczoKICAgICAgLSBncm91cDogIiIgIyBjb3JlCiAgICAgICAgcmVzb3VyY2VzOiBbImNvbmZpZ21hcHMiXQogIC0gbGV2ZWw6IE5vbmUKICAgIHVzZXJzOiBbImt1YmVsZXQiXSAjIGxlZ2FjeSBrdWJlbGV0IGlkZW50aXR5CiAgICB2ZXJiczogWyJnZXQiXQogICAgcmVzb3VyY2VzOgogICAgICAtIGdyb3VwOiAiIiAjIGNvcmUKICAgICAgICByZXNvdXJjZXM6IFsibm9kZXMiLCAibm9kZXMvc3RhdHVzIl0KICAtIGxldmVsOiBOb25lCiAgICB1c2VyR3JvdXBzOiBbInN5c3RlbTpub2RlcyJdCiAgICB2ZXJiczogWyJnZXQiXQogICAgcmVzb3VyY2VzOgogICAgICAtIGdyb3VwOiAiIiAjIGNvcmUKICAgICAgICByZXNvdXJjZXM6IFsibm9kZXMiLCAibm9kZXMvc3RhdHVzIl0KICAtIGxldmVsOiBOb25lCiAgICB1c2VyczoKICAgICAgLSBzeXN0ZW06a3ViZS1jb250cm9sbGVyLW1hbmFnZXIKICAgICAgLSBzeXN0ZW06a3ViZS1zY2hlZHVsZXIKICAgICAgLSBzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZW5kcG9pbnQtY29udHJvbGxlcgogICAgdmVyYnM6IFsiZ2V0IiwgInVwZGF0ZSJdCiAgICBuYW1lc3BhY2VzOiBbImt1YmUtc3lzdGVtIl0KICAgIHJlc291cmNlczoKICAgICAgLSBncm91cDogIiIgIyBjb3JlCiAgICAgICAgcmVzb3VyY2VzOiBbImVuZHBvaW50cyJdCiAgLSBsZXZlbDogTm9uZQogICAgdXNlcnM6IFsic3lzdGVtOmFwaXNlcnZlciJdCiAgICB2ZXJiczogWyJnZXQiXQogICAgcmVzb3VyY2VzOgogICAgICAtIGdyb3VwOiAiIiAjIGNvcmUKICAgICAgICByZXNvdXJjZXM6IFsibmFtZXNwYWNlcyIsICJuYW1lc3BhY2VzL3N0YXR1cyIsICJuYW1lc3BhY2VzL2ZpbmFsaXplIl0KICAtIGxldmVsOiBOb25lCiAgICB1c2VyczogWyJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06Y2x1c3Rlci1hdXRvc2NhbGVyIl0KICAgIHZlcmJzOiBbImdldCIsICJ1cGRhdGUiXQogICAgbmFtZXNwYWNlczogWyJrdWJlLXN5c3RlbSJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gZ3JvdXA6ICIiICMgY29yZQogICAgICAgIHJlc291cmNlczogWyJjb25maWdtYXBzIiwgImVuZHBvaW50cyJdCiAgIyBEb24ndCBsb2cgSFBBIGZldGNoaW5nIG1ldHJpY3MuCiAgLSBsZXZlbDogTm9uZQogICAgdXNlcnM6CiAgICAgIC0gc3lzdGVtOmt1YmUtY29udHJvbGxlci1tYW5hZ2VyCiAgICB2ZXJiczogWyJnZXQiLCAibGlzdCJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gZ3JvdXA6ICJtZXRyaWNzLms4cy5pbyIKICAjIERvbid0IGxvZyB0aGVzZSByZWFkLW9ubHkgVVJMcy4KICAtIGxldmVsOiBOb25lCiAgICBub25SZXNvdXJjZVVSTHM6CiAgICAgIC0gL2hlYWx0aHoqCiAgICAgIC0gL3ZlcnNpb24KICAgICAgLSAvc3dhZ2dlcioKICAjIERvbid0IGxvZyBldmVudHMgcmVxdWVzdHMuCiAgLSBsZXZlbDogTm9uZQogICAgcmVzb3VyY2VzOgogICAgICAtIGdyb3VwOiAiIiAjIGNvcmUKICAgICAgICByZXNvdXJjZXM6IFsiZXZlbnRzIl0KICAjIG5vZGUgYW5kIHBvZCBzdGF0dXMgY2FsbHMgZnJvbSBub2RlcyBhcmUgaGlnaC12b2x1bWUgYW5kIGNhbiBiZSBsYXJnZSwgZG9uJ3QgbG9nIHJlc3BvbnNlcyBmb3IgZXhwZWN0ZWQgdXBkYXRlcyBmcm9tIG5vZGVzCiAgLSBsZXZlbDogUmVxdWVzdAogICAgdXNlcnM6CiAgICAgIFsKICAgICAgICAia3ViZWxldCIsCiAgICAgICAgInN5c3RlbTpub2RlLXByb2JsZW0tZGV0ZWN0b3IiLAogICAgICAgICJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06bm9kZS1wcm9ibGVtLWRldGVjdG9yIiwKICAgICAgXQogICAgdmVyYnM6IFsidXBkYXRlIiwgInBhdGNoIl0KICAgIHJlc291cmNlczoKICAgICAgLSBncm91cDogIiIgIyBjb3JlCiAgICAgICAgcmVzb3VyY2VzOiBbIm5vZGVzL3N0YXR1cyIsICJwb2RzL3N0YXR1cyJdCiAgICBvbWl0U3RhZ2VzOgogICAgICAtICJSZXF1ZXN0UmVjZWl2ZWQiCiAgLSBsZXZlbDogUmVxdWVzdAogICAgdXNlckdyb3VwczogWyJzeXN0ZW06bm9kZXMiXQogICAgdmVyYnM6IFsidXBkYXRlIiwgInBhdGNoIl0KICAgIHJlc291cmNlczoKICAgICAgLSBncm91cDogIiIgIyBjb3JlCiAgICAgICAgcmVzb3VyY2VzOiBbIm5vZGVzL3N0YXR1cyIsICJwb2RzL3N0YXR1cyJdCiAgICBvbWl0U3RhZ2VzOgogICAgICAtICJSZXF1ZXN0UmVjZWl2ZWQiCiAgIyBkZWxldGVjb2xsZWN0aW9uIGNhbGxzIGNhbiBiZSBsYXJnZSwgZG9uJ3QgbG9nIHJlc3BvbnNlcyBmb3IgZXhwZWN0ZWQgbmFtZXNwYWNlIGRlbGV0aW9ucwogIC0gbGV2ZWw6IFJlcXVlc3QKICAgIHVzZXJzOiBbInN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTpuYW1lc3BhY2UtY29udHJvbGxlciJdCiAgICB2ZXJiczogWyJkZWxldGVjb2xsZWN0aW9uIl0KICAgIG9taXRTdGFnZXM6CiAgICAgIC0gIlJlcXVlc3RSZWNlaXZlZCIKICAjIFNlY3JldHMsIENvbmZpZ01hcHMsIGFuZCBUb2tlblJldmlld3MgY2FuIGNvbnRhaW4gc2Vuc2l0aXZlICYgYmluYXJ5IGRhdGEsCiAgIyBzbyBvbmx5IGxvZyBhdCB0aGUgTWV0YWRhdGEgbGV2ZWwuCiAgLSBsZXZlbDogTWV0YWRhdGEKICAgIHJlc291cmNlczoKICAgICAgLSBncm91cDogIiIgIyBjb3JlCiAgICAgICAgcmVzb3VyY2VzOiBbInNlY3JldHMiLCAiY29uZmlnbWFwcyJdCiAgICAgIC0gZ3JvdXA6IGF1dGhlbnRpY2F0aW9uLms4cy5pbwogICAgICAgIHJlc291cmNlczogWyJ0b2tlbnJldmlld3MiXQogICAgb21pdFN0YWdlczoKICAgICAgLSAiUmVxdWVzdFJlY2VpdmVkIgogICMgR2V0IHJlcHNvbnNlcyBjYW4gYmUgbGFyZ2U7IHNraXAgdGhlbS4KICAtIGxldmVsOiBSZXF1ZXN0CiAgICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gZ3JvdXA6ICIiICMgY29yZQogICAgICAtIGdyb3VwOiAiYWRtaXNzaW9ucmVnaXN0cmF0aW9uLms4cy5pbyIKICAgICAgLSBncm91cDogImFwaWV4dGVuc2lvbnMuazhzLmlvIgogICAgICAtIGdyb3VwOiAiYXBpcmVnaXN0cmF0aW9uLms4cy5pbyIKICAgICAgLSBncm91cDogImFwcHMiCiAgICAgIC0gZ3JvdXA6ICJhdXRoZW50aWNhdGlvbi5rOHMuaW8iCiAgICAgIC0gZ3JvdXA6ICJhdXRob3JpemF0aW9uLms4cy5pbyIKICAgICAgLSBncm91cDogImF1dG9zY2FsaW5nIgogICAgICAtIGdyb3VwOiAiYmF0Y2giCiAgICAgIC0gZ3JvdXA6ICJjZXJ0aWZpY2F0ZXMuazhzLmlvIgogICAgICAtIGdyb3VwOiAiZXh0ZW5zaW9ucyIKICAgICAgLSBncm91cDogIm1ldHJpY3MuazhzLmlvIgogICAgICAtIGdyb3VwOiAibmV0d29ya2luZy5rOHMuaW8iCiAgICAgIC0gZ3JvdXA6ICJwb2xpY3kiCiAgICAgIC0gZ3JvdXA6ICJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIgogICAgICAtIGdyb3VwOiAic2NoZWR1bGluZy5rOHMuaW8iCiAgICAgIC0gZ3JvdXA6ICJzZXR0aW5ncy5rOHMuaW8iCiAgICAgIC0gZ3JvdXA6ICJzdG9yYWdlLms4cy5pbyIKICAgIG9taXRTdGFnZXM6CiAgICAgIC0gIlJlcXVlc3RSZWNlaXZlZCIKICAjIERlZmF1bHQgbGV2ZWwgZm9yIGtub3duIEFQSXMKICAtIGxldmVsOiBSZXF1ZXN0UmVzcG9uc2UKICAgIHJlc291cmNlczoKICAgICAgLSBncm91cDogIiIgIyBjb3JlCiAgICAgIC0gZ3JvdXA6ICJhZG1pc3Npb25yZWdpc3RyYXRpb24uazhzLmlvIgogICAgICAtIGdyb3VwOiAiYXBpZXh0ZW5zaW9ucy5rOHMuaW8iCiAgICAgIC0gZ3JvdXA6ICJhcGlyZWdpc3RyYXRpb24uazhzLmlvIgogICAgICAtIGdyb3VwOiAiYXBwcyIKICAgICAgLSBncm91cDogImF1dGhlbnRpY2F0aW9uLms4cy5pbyIKICAgICAgLSBncm91cDogImF1dGhvcml6YXRpb24uazhzLmlvIgogICAgICAtIGdyb3VwOiAiYXV0b3NjYWxpbmciCiAgICAgIC0gZ3JvdXA6ICJiYXRjaCIKICAgICAgLSBncm91cDogImNlcnRpZmljYXRlcy5rOHMuaW8iCiAgICAgIC0gZ3JvdXA6ICJleHRlbnNpb25zIgogICAgICAtIGdyb3VwOiAibWV0cmljcy5rOHMuaW8iCiAgICAgIC0gZ3JvdXA6ICJuZXR3b3JraW5nLms4cy5pbyIKICAgICAgLSBncm91cDogInBvbGljeSIKICAgICAgLSBncm91cDogInJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8iCiAgICAgIC0gZ3JvdXA6ICJzY2hlZHVsaW5nLms4cy5pbyIKICAgICAgLSBncm91cDogInNldHRpbmdzLms4cy5pbyIKICAgICAgLSBncm91cDogInN0b3JhZ2UuazhzLmlvIgogICAgb21pdFN0YWdlczoKICAgICAgLSAiUmVxdWVzdFJlY2VpdmVkIgogICMgRGVmYXVsdCBsZXZlbCBmb3IgYWxsIG90aGVyIHJlcXVlc3RzLgogIC0gbGV2ZWw6IE1ldGFkYXRhCiAgICBvbWl0U3RhZ2VzOgogICAgICAtICJSZXF1ZXN0UmVjZWl2ZWQiCg==
    initConfiguration:
      skipPhases:
      - addon/coredns
      - addon/kube-proxy
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: external
          eviction-soft: memory.available<500Mi,nodefs.available<15%,nodefs.inodesFree<5%,imagefs.available<15%,pid.available<30%
          eviction-soft-grace-period: memory.available=30s,nodefs.available=2m,nodefs.inodesFree=1m,imagefs.available=2m,pid.available=1m
          eviction-hard: memory.available<200Mi,nodefs.available<10%,nodefs.inodesFree<3%,imagefs.available<10%,pid.available<20%
          eviction-minimum-reclaim: imagefs.available=5%,memory.available=100Mi,nodefs.available=5%
          protect-kernel-defaults: "true"
        name: '@@HOSTNAME@@'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: external
          eviction-soft: memory.available<500Mi,nodefs.available<15%,nodefs.inodesFree<5%,imagefs.available<15%,pid.available<30%
          eviction-soft-grace-period: memory.available=30s,nodefs.available=2m,nodefs.inodesFree=1m,imagefs.available=2m,pid.available=1m
          eviction-hard: memory.available<200Mi,nodefs.available<10%,nodefs.inodesFree<3%,imagefs.available<10%,pid.available<20%
          eviction-minimum-reclaim: imagefs.available=5%,memory.available=100Mi,nodefs.available=5%
          protect-kernel-defaults: "true"
        name: '@@HOSTNAME@@'
    preKubeadmCommands:
      - /bin/test ! -d /var/lib/kubelet && (/bin/mkdir -p /var/lib/kubelet && /bin/chmod 0750 /var/lib/kubelet)
      - /opt/bin/calculate_kubelet_reservations.sh
      - sed -i "s/'@@HOSTNAME@@'/$(curl -s -H Metadata:true --noproxy '*' 'http://169.254.169.254/metadata/instance?api-version=2020-09-01' | jq -r .compute.name)/g" /etc/kubeadm.yml
      - sed -i -e 's/registry.k8s.io\/pause/quay.io\/giantswarm\/pause/' /etc/sysconfig/kubelet
    postKubeadmCommands: []
    
  replicas: 3
  version: 1.25.10
---
# Source: cluster-azure/templates/list.yaml
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  annotations:
    machine-deployment.giantswarm.io/name: test-wc-md0000
  labels:
    giantswarm.io/machine-deployment: test-wc-md0000
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
  name: test-wc-md0000
  namespace: org-giantswarm
spec:
  clusterName: test-wc
  replicas: 4
  selector:
    matchLabels: null
  template:
    metadata:
      labels:
        app: "cluster-azure"
        app.kubernetes.io/managed-by: "Helm"
        cluster.x-k8s.io/cluster-name: "test-wc"
        giantswarm.io/cluster: "test-wc"
        giantswarm.io/organization: "test"
        app.kubernetes.io/version: ""
        helm.sh/chart: "cluster-azure-0.0.0-dev"
        application.giantswarm.io/team: "phoenix"
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: test-wc--0b97aa05
      clusterName: test-wc
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: test-wc--55abf9fd
      version: 1.25.10
---
# Source: cluster-azure/templates/list.yaml
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineHealthCheck
metadata:
  annotations:
    machine-deployment.giantswarm.io/name: test-wc-
  labels:
    giantswarm.io/machine-deployment: test-wc-
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
  name: test-wc-
  namespace: org-giantswarm
spec:
  clusterName: test-wc
  # (Optional) maxUnhealthy prevents further remediation if the cluster is already partially unhealthy
  maxUnhealthy: 40%
  # (Optional) nodeStartupTimeout determines how long a MachineHealthCheck should wait for
  # a Node to join the cluster, before considering a Machine unhealthy.
  nodeStartupTimeout: 10m
  # selector is used to determine which Machines should be health checked
  selector:
    matchLabels:
      "cluster.x-k8s.io/deployment-name": test-wc-
  # Conditions to check on Nodes for matched Machines, if any condition is matched for the duration of its timeout, the Machine is considered unhealthy
  unhealthyConditions:
  - type: Ready
    status: Unknown
    timeout: 300s
  - type: Ready
    status: "False"
    timeout: 300s
---
# Source: cluster-azure/templates/helmreleases/cleanup-helmreleases-hook-job.yaml
# Because cluster provider resources are often deleted before flux has a chance
# to uninstall helm releases for all deleted HelmRelease CRs they become
# leftovers because there is still flux finalizer on them. This looks like
# following:
#
#     $ kubectl get helmrelease -n org-multi-project
#     NAME                           AGE     READY   STATUS
#     pawe1-cilium                   99m     False   failed to get last release revision
#     pawe1-cloud-provider-vsphere   99m     False   failed to get last release revision
#
# Both HelmRelease CRs in this case have deletionTimestamp and finalizers set,
# e.g.:
#
#     deletionTimestamp: "2023-03-02T14:34:49Z"
#     finalizers:
#       - finalizers.fluxcd.io
#
# To work around this, post-delete Job deletes all finalizers on all HelmRelease
# CRs created with this chart.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "test-wc-cleanup-helmreleases-hook"
  namespace: "org-giantswarm"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
---
# Source: cluster-azure/templates/helmreleases/cleanup-helmreleases-hook-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "test-wc-cleanup-helmreleases-hook"
  namespace: "org-giantswarm"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
rules:
  - apiGroups: ["helm.toolkit.fluxcd.io"]
    resources: ["helmreleases"]
    verbs: ["get", "list"]
  - apiGroups: ["helm.toolkit.fluxcd.io"]
    resources: ["helmreleases"]
    resourceNames:
      - "test-wc-cilium"
      - "test-wc-azure-cloud-controller-manager"
      - "test-wc-azure-cloud-node-manager"
      - "test-wc-azuredisk-csi-driver"
      - "test-wc-azurefile-csi-driver"
      - "test-wc-coredns"
      - "test-wc-vertical-pod-autoscaler-crd"
    verbs: ["patch"]
  - apiGroups: ["source.toolkit.fluxcd.io"]
    resources: ["helmcharts"]
    verbs: ["get", "list"]
  - apiGroups: ["source.toolkit.fluxcd.io"]
    resources: ["helmcharts"]
    verbs: ["patch"]
---
# Source: cluster-azure/templates/helmreleases/cleanup-helmreleases-hook-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "test-wc-cleanup-helmreleases-hook"
  namespace: "org-giantswarm"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
    "helm.sh/hook-weight": "-1"
  labels:
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
subjects:
  - kind: ServiceAccount
    name: "test-wc-cleanup-helmreleases-hook"
    namespace: "org-giantswarm"
roleRef:
  kind: Role
  name: "test-wc-cleanup-helmreleases-hook"
  apiGroup: rbac.authorization.k8s.io
---
# Source: cluster-azure/templates/helmreleases/cleanup-helmreleases-hook-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "test-wc-cleanup-helmreleases-hook"
  namespace: "org-giantswarm"
  annotations:
    "helm.sh/hook": "post-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "0"
  labels:
    app: "cluster-azure"
    app.kubernetes.io/managed-by: "Helm"
    cluster.x-k8s.io/cluster-name: "test-wc"
    giantswarm.io/cluster: "test-wc"
    giantswarm.io/organization: "test"
    app.kubernetes.io/version: ""
    helm.sh/chart: "cluster-azure-0.0.0-dev"
    application.giantswarm.io/team: "phoenix"
spec:
  ttlSecondsAfterFinished: 86400 # 24h
  template:
    metadata:
      name: "test-wc-cleanup-helmreleases-hook"
      namespace: "org-giantswarm"
      labels:
        app: "cluster-azure"
        app.kubernetes.io/managed-by: "Helm"
        cluster.x-k8s.io/cluster-name: "test-wc"
        giantswarm.io/cluster: "test-wc"
        giantswarm.io/organization: "test"
        app.kubernetes.io/version: ""
        helm.sh/chart: "cluster-azure-0.0.0-dev"
        application.giantswarm.io/team: "phoenix"
    spec:
      restartPolicy: Never
      serviceAccountName: "test-wc-cleanup-helmreleases-hook"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: post-delete-job
          image: "gsoci.azurecr.io/giantswarm/kubectl:1.25.15"
          command:
            - "/bin/sh"
            - "-xc"
            - |
              for r in $(kubectl get helmrelease -n org-giantswarm -l "giantswarm.io/cluster=test-wc" -o name) ; do
                  kubectl patch -n org-giantswarm helmchart $(kubectl get -n org-giantswarm "${r}" -o jsonpath='{.status.helmChart}' | cut -d/ -f2) --type=merge -p '{"metadata": {"finalizers": []}}'
                  kubectl patch -n org-giantswarm "${r}" --type=merge -p '{"metadata": {"finalizers": []}}'
              done
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
            readOnlyRootFilesystem: true
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "256Mi"
              cpu: "100m"
